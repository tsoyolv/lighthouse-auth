plugins {
    id 'java'
    id 'io.spring.dependency-management' version "${springDMVersion}" apply false
    id 'org.springframework.boot' version "${springBootVersion}" apply false
}

repositories {
    jcenter()
}
group = 'ru.lighthouse'
version = "${lProjectVersion}"

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR4" // for Spring Cloud (delete if used kubernetes)
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" // for Spring Cloud (delete if used kubernetes)
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    runtimeOnly "com.h2database:h2:${h2Version}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security" // FROM root project
    implementation "org.springframework.boot:spring-boot-starter-data-jpa" // FROM root project
    implementation "org.apache.commons:commons-lang3:${apacheCommonLangVersion}"
    implementation "io.jsonwebtoken:jjwt:${jjwtversion}"
    testImplementation "org.mock-server:mockserver-client-java:${mockServerVersion}"
    testImplementation "org.mock-server:mockserver-netty:${mockServerVersion}"
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
        resources {
            srcDirs= ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs= ["src/test/java"]
        }
        resources {
            srcDirs= ["src/test/resources"]
        }
    }
}

test {
    useJUnitPlatform()
}

clean.doLast {
    file('h2-file-db').deleteDir()
    file('logs').deleteDir()
}